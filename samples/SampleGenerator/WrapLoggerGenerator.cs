using Microsoft.CodeAnalysis;
using SourceGeneratorToolkit;

namespace SampleGenerator;

[Generator(LanguageNames.CSharp)]
public class WrapLoggerGenerator : IIncrementalGenerator
{
    private const string _attributeSource = """
        using System;
        namespace SampleGeneratorGenerated;

        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
        internal sealed class WrapLoggerAttribute : Attribute
        {
        }
        """;
    private static readonly string[] _comments = [
        """
        /*
            foo is a 1st metavariable
                foo
                foobar
                foobarbaz
        */
        """,
        """
        /*
            bar is a 2nd metavariable
                bar
                barbaz
        */
        """,
        """
        /*
            baz is a 3rd metavariable
                baz
        */
        """,
        ];

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource("WrapLoggerAttribute.cs", _attributeSource);
        });

        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            "SampleGeneratorGenerated.WrapLoggerAttribute",
            static (node, token) => true,
            static (context, token) => context);
        context.RegisterSourceOutput(source, Emit);
    }


    private static void Emit(
        SourceProductionContext context,
        GeneratorAttributeSyntaxContext source)
    {
        context.CancellationToken.ThrowIfCancellationRequested();
        var builder = new SourceBuilder(source, false);
        builder.AppendLine($$"""
            {{builder.AutoGeneratedComment}}
            ///
            /// This code is generated by WrapLoggerGenerator.
            ///
            {{builder.DefaultUsingDirectives}}
            using System.Linq;
            {{builder.NamespaceDeclaration}}

            """);

        context.CancellationToken.ThrowIfCancellationRequested();
        using (var type = builder.BeginTargetTypeDeclare())
        {
            builder.AppendLine($$"""
                public string SayHello(string someone)
                    => $"Hello, {someone}!";

                """);
            builder.AppendLine($$"""
                public string SayHello(IEnumerable<string> somebody)
                {
                    var somebodyArray = somebody.ToArray();
                    return somebodyArray.Length switch
                    {
                        0 => "Hello, nobody!",
                        1 => $"Hello, {somebodyArray[0]}!",
                        2 => $"Hello, {somebodyArray[0]} and {somebodyArray[1]}!",
                        _ => $"Hello, {string.Join(", ", somebodyArray[..^1])} and {somebodyArray[^1]}!",
                    };
                }

                """);
            builder.AppendLine($$"""
                    {{_comments.PreserveIndent()}}
                """);
        }

        context.CancellationToken.ThrowIfCancellationRequested();
        var hintName = builder.GetPreferHintName(prefix: "", suffix: "");
        var sourceCode = builder.Build();
        context.AddSource(hintName, sourceCode);
    }
}
